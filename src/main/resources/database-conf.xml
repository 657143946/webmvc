<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="
       http://www.springframework.org/schema/beans         http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context       http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/tx            http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
       "
        >

    <!--Hibernate-->
    <!-- 加载资源文件  其中包含变量信息，必须在Spring配置文件的最前面加载，即第一个加载-->
    <context:property-placeholder location="classpath:properties/mysql.properties" />

    <!--阿里巴巴的连接池-->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="close">
        <!--database地址，账号，密码，-->
        <property name="url" value="${url}"/>
        <property name="username" value="${user}"/>
        <property name="password" value="${password}"/>
        <!--开启sql监控-->
        <property name="filters" value="stat"/>
        <!--连接池数量配置-->
        <property name="initialSize" value="1"/>
        <property name="minIdle" value="1"/>
        <property name="maxActive" value="20"/>
        <!--获取连接等待超时时间-->
        <property name="maxWait" value="60000"/>
        <!--配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒-->
        <property name="timeBetweenEvictionRunsMillis" value="60000" />
        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="300000" />
        <!--在连接空闲时检测连接是否有效,检测时机是（空闲，取得，返回）-->
        <property name="validationQuery" value="SELECT 'x'"/>
        <property name="testWhileIdle" value="true"/>
        <property name="testOnBorrow" value="true"/>
        <property name="testOnReturn" value="true"/>
        <!--打开PSCache，并且指定每个连接上PSCache的大小-->
        <!--sql里用"?"占位，等待被替换。例如"select * from table1 where user_name = ? and age > ?",替换后的结果将被缓存起来-->
        <property name="poolPreparedStatements" value="true"/>
        <property name="maxPoolPreparedStatementPerConnectionSize" value="60"/>
    </bean>

    <!--sessionFactory-->
    <bean id="sessionFactory" class="org.springframework.orm.hibernate5.LocalSessionFactoryBean">
        <property name="dataSource" ref="dataSource" />
        <property name="hibernateProperties">
            <props>
                <!--方言，告诉hibernate适配什么样的数据库，这里是适配mysql-->
                <prop key="hibernate.dialect">org.hibernate.dialect.MySQLDialect</prop>
                <!--显示执行的sql语句，方便调试，上线后关闭-->
                <prop key="hibernate.show_sql">true</prop>
                <!--最常用的属性，第一次加载hibernate时根据model类会自动建立起表的结构（前提是先建立好数据库），以后加载hibernate时根据model类自动更新表结构，即使表结构改变了但表中的行仍然存在不会删除以前的行。要注意的是当部署到服务器后，表结构是不会被马上建立起来的，是要等应用第一次运行起来后才会。-->
                <prop key="hibernate.hbm2ddl.auto">update</prop>
            </props>
        </property>
        <!-- 包扫描的方式加载注解类(推荐) -->
        <property name="packagesToScan">
            <list>
                <value>me.leemo.springmvc.entity</value>
            </list>
        </property>
    </bean>


    <!-- 用注解来实现事务管理 -->
    <bean id="transactionManager"
          class="org.springframework.orm.hibernate5.HibernateTransactionManager">
        <property name="sessionFactory" ref="sessionFactory"/>
    </bean>
    <tx:annotation-driven transaction-manager="transactionManager" />



</beans>